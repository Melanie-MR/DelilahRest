openapi: 3.0.1
info:
  title: Delilah Resto
  description: 'This is an online ordering system for a restaurant'
  termsOfService: http://swagger.io/terms/
  contact:
    name: Melanie Mendez
    email: mendezr.melanie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: http://localhost:3000

tags:
- name: products
  description: Products operations
- name: orders
  description: Orders operations
- name: users
  description: Users operations
  
paths:
  /products:
    post:
      tags:
      - products
      summary: Create a new product
      requestBody:
        description: The admin can add a new product to the menu available. 
        content:
          application/json:
            schema:
              required:
              - name
              - price
              type: object
              properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                    example: "Arepa"
                  price:
                    type: number
                    example: 20.5
                  description:
                    type: string
                    example: "A venezuelan corn bread"
      responses:
        200:
          description: Product created successfully
        400:
          description: Something happened + error
      security:
        - bearerAuth: []
    get:
      tags:
      - products
      summary: Get the whole list of products
      description: All the authUsers can obtain all the products of the menu
      responses:
        200:
          description: These are all the products + products
        400:
          description: Something happened + error
      security:
        - bearerAuth: []
  /products/{id}:
    parameters:
        - name: id
          in: path
          description: Id of the product that you need to get
          required: true
          schema:
            type: integer
            format: int64
    get:
      security:
      - bearerAuth: []
      tags:
      - products
      summary: Returns a single product by ID
      description: All the authUsers can get the information of a specific product by id
      
      responses:
        200:
          description: This is the product with the id "id" + product
        400:
          description: Something happened + error
        404:
          description: There is not products with this id "id"
    put:
      security:
      - bearerAuth: []
      tags:
      - products
      summary: To update the menu
      requestBody:
        description: The admin can change the product's details using the ID of the product
        content:
          application/json:
            schema:
              type: array
              items:
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Arepa"
                  price:
                    type: number
                    example: 20.5
                  description:
                    type: string
                    example: "A venezuelan corn bread"
      responses:
        200:
          description: Product was updated
          content: {}
        400:
          description: Something happened + error
          content: {}
          
    delete:
      security:
      - bearerAuth: []
      tags:
      - products
      summary: Just admin can delete a product
      parameters:
      - name: id
        in: path
        description: Product id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: DELETED
        400:
          description: Something happened + error
        404:
          description: There is not products with the id "id" to be eliminated

  /orders:  
    get:
      security:
      - bearerAuth: []
      tags:
      - orders
      summary: Get all the orders
      description: Admin can get all the list of orders
      responses:
        200:
          description: These are all the products + products
        400:
          description: Something happened + error

  /order:
    post:
      security:
      - bearerAuth: []
      tags:
      - orders
      summary: Create a order
      description: Create a new order
      requestBody:
        description: All authUsers can create an order using the productsId
        content:
          application/json:
            schema:
              required:
              - productsId
              - payment_method
              - address
              type: object
              properties:
                productsId:
                  type: array
                  items:
                    type: integer
                    example: [3, 1]
                payment_method:
                  type: string
                  example: "cash"
                address:
                  type: string
                  example: "Charallave 123"
                total: 
                  type: number
                  example: 203.5
                description:
                  type: string
                  example: "Any information that the user wants to add to their order"
      responses:
        200:
          description: Order created successfully + responseObject
        400:
          description: Something happened + error
        404:
          description: One or more mandatory fields are empty
          
  /order/{id}:
    parameters:
        - name: id
          in: path
          description: ID of the order that needs to be operated
          required: true
          schema:
            type: integer
            format: int64
    get:
      security:
      - bearerAuth: []
      tags:
      - orders
      summary: Find an order by ID
      description: AuthUsers can get a specific order by id. Admin can acces to all IDs, authUsers just they own orders. This operation will bring the order and product's details.
      responses:
        200:
          description: This is the order with the id 'id' + orderDetails
        400:
          description: Something happened + error
        403:
          description: Order does not exists for this user
    put:
      security:
      - bearerAuth: []
      tags:
      - orders
      summary: To update the order
      requestBody:
        description: The admin can change the order's details and the status using the ID of the product
        content:
          application/json:
            schema:
              required:
              - order_status
              type: object
              items:
                properties:
                  order_status:
                    type: string
                    description: order status
                    enum:
                    - new
                    - confirmed
                    - processing
                    - sending
                    - cancelled
                    - delivered
                  user_id:
                    type: integer
                    example: 5
                  payment_method:
                    type: string
                    description: payment method
                    enum:
                    - cash
                    - credit_card
                    - debit_card
                  address: 
                    type: string
                    example: "Laurel 123"
      responses:
        200:
          description: Order was updated
        400:
          description: Something happened + error
          content: {}
        
    delete:
      tags:
      - orders
      summary: Delete order by ID
      description: Just admin can delete an order
      responses:
        200:
          description: Order deleted
        400:
          description: Something happened + error
        404:
          description: There is not products with the id "id" to be eliminated
  
  /users:
    get:
        security:
          - bearerAuth: []
        tags:
        - users
        summary: Get the list of users
        description: Only admin can obtain all the user's information
        responses:
          200:
            description: These are all the users registered + users
          400:
            description: Something happened + error
  /signup:
    post:
      tags:
      - users
      summary: Create user
      description: This is for create a new account as an user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              required:
              - username
              - address
              - password
              type: object
              properties:
                  username:
                    type: string
                    example: "simon"
                  fullname:
                    type: string
                    example: "Simon Diaz"
                  email:
                    type: string
                    example: "simon-diaz@gmail.com"  
                  phone_number:
                    type: integer
                    example: 6506807845
                  address:
                      type: string
                      example: "Tapipa 123"
                  password:
                    type: string
                    minLength: 8
                  is_admin: 
                    type: boolean
                    example: TRUE
        required: true
      responses:
        201:
          description: User created successfully
        400:
          description: Something happened + error
    
  /user/{id}: 
    parameters:
          - name: id
            in: path
            description: Id of the product that you need to operate with
            required: true
            schema:
              type: integer
              format: int64
    get:
      security:
      - bearerAuth: []
      tags:
      - users
      summary: Returns a single user's information by userID
      description: AuthUsers can get user information by id. Admin can acces to all user, authUsers only can acces to they own information
      responses:
        200:
          description: This is the users information of user with id 'id' + userInfo
        202:
          description: This is your information
        400:
          description: Something happened + error
        401:
          description: You dont have allowed to acces to this information
        403:
          description: User does not exists with this id
  
  /auth:
    post:
      tags:
      - users
      summary: To login with a token.  
      description: You must add information about the user to login
      requestBody:
        description: details to login
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "simon" 
                password:
                      type: string
                      minLength: 8
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                    message:
                      type: string
                      example: User authenticated
                    token:
                      type: string
                      example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXV"
components:
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT
